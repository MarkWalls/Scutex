//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ScutexServiceModel", "FK_LicenseActivations_LicenseKeys", "LicenseKey", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.LicenseKey), "LicenseActivation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.LicenseActivation), true)]
[assembly: EdmRelationshipAttribute("ScutexServiceModel", "FK_LicenseKeys_LicenseSets", "LicenseSet", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.LicenseSet), "LicenseKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.LicenseKey), true)]
[assembly: EdmRelationshipAttribute("ScutexServiceModel", "FK_LicenseSets_Licenses", "License", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.License), "LicenseSet", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ServicesDataRepository.LicenseSet), true)]

#endregion

namespace WaveTech.Scutex.Repositories.ServicesDataRepository
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ScutexServiceEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ScutexServiceEntities object using the connection string found in the 'ScutexServiceEntities' section of the application configuration file.
        /// </summary>
        public ScutexServiceEntities() : base("name=ScutexServiceEntities", "ScutexServiceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ScutexServiceEntities object.
        /// </summary>
        public ScutexServiceEntities(string connectionString) : base(connectionString, "ScutexServiceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ScutexServiceEntities object.
        /// </summary>
        public ScutexServiceEntities(EntityConnection connection) : base(connection, "ScutexServiceEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ActivationLog> ActivationLogs
        {
            get
            {
                if ((_ActivationLogs == null))
                {
                    _ActivationLogs = base.CreateObjectSet<ActivationLog>("ActivationLogs");
                }
                return _ActivationLogs;
            }
        }
        private ObjectSet<ActivationLog> _ActivationLogs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseActivation> LicenseActivations
        {
            get
            {
                if ((_LicenseActivations == null))
                {
                    _LicenseActivations = base.CreateObjectSet<LicenseActivation>("LicenseActivations");
                }
                return _LicenseActivations;
            }
        }
        private ObjectSet<LicenseActivation> _LicenseActivations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseKey> LicenseKeys
        {
            get
            {
                if ((_LicenseKeys == null))
                {
                    _LicenseKeys = base.CreateObjectSet<LicenseKey>("LicenseKeys");
                }
                return _LicenseKeys;
            }
        }
        private ObjectSet<LicenseKey> _LicenseKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<License> Licenses
        {
            get
            {
                if ((_Licenses == null))
                {
                    _Licenses = base.CreateObjectSet<License>("Licenses");
                }
                return _Licenses;
            }
        }
        private ObjectSet<License> _Licenses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseSet> LicenseSets
        {
            get
            {
                if ((_LicenseSets == null))
                {
                    _LicenseSets = base.CreateObjectSet<LicenseSet>("LicenseSets");
                }
                return _LicenseSets;
            }
        }
        private ObjectSet<LicenseSet> _LicenseSets;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Master> Masters
        {
            get
            {
                if ((_Masters == null))
                {
                    _Masters = base.CreateObjectSet<Master>("Masters");
                }
                return _Masters;
            }
        }
        private ObjectSet<Master> _Masters;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ActivationLogs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActivationLogs(ActivationLog activationLog)
        {
            base.AddObject("ActivationLogs", activationLog);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseActivations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseActivations(LicenseActivation licenseActivation)
        {
            base.AddObject("LicenseActivations", licenseActivation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseKeys(LicenseKey licenseKey)
        {
            base.AddObject("LicenseKeys", licenseKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Licenses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenses(License license)
        {
            base.AddObject("Licenses", license);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseSets EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseSets(LicenseSet licenseSet)
        {
            base.AddObject("LicenseSets", licenseSet);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Masters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMasters(Master master)
        {
            base.AddObject("Masters", master);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="ActivationLog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ActivationLog : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ActivationLog object.
        /// </summary>
        /// <param name="activationLogId">Initial value of the ActivationLogId property.</param>
        /// <param name="licenseKey">Initial value of the LicenseKey property.</param>
        /// <param name="activationResult">Initial value of the ActivationResult property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        public static ActivationLog CreateActivationLog(global::System.Int32 activationLogId, global::System.String licenseKey, global::System.Int32 activationResult, global::System.DateTime timestamp)
        {
            ActivationLog activationLog = new ActivationLog();
            activationLog.ActivationLogId = activationLogId;
            activationLog.LicenseKey = licenseKey;
            activationLog.ActivationResult = activationResult;
            activationLog.Timestamp = timestamp;
            return activationLog;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActivationLogId
        {
            get
            {
                return _ActivationLogId;
            }
            set
            {
                if (_ActivationLogId != value)
                {
                    OnActivationLogIdChanging(value);
                    ReportPropertyChanging("ActivationLogId");
                    _ActivationLogId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ActivationLogId");
                    OnActivationLogIdChanged();
                }
            }
        }
        private global::System.Int32 _ActivationLogId;
        partial void OnActivationLogIdChanging(global::System.Int32 value);
        partial void OnActivationLogIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LicenseKey
        {
            get
            {
                return _LicenseKey;
            }
            set
            {
                OnLicenseKeyChanging(value);
                ReportPropertyChanging("LicenseKey");
                _LicenseKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LicenseKey");
                OnLicenseKeyChanged();
            }
        }
        private global::System.String _LicenseKey;
        partial void OnLicenseKeyChanging(global::System.String value);
        partial void OnLicenseKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActivationResult
        {
            get
            {
                return _ActivationResult;
            }
            set
            {
                OnActivationResultChanging(value);
                ReportPropertyChanging("ActivationResult");
                _ActivationResult = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivationResult");
                OnActivationResultChanged();
            }
        }
        private global::System.Int32 _ActivationResult;
        partial void OnActivationResultChanging(global::System.Int32 value);
        partial void OnActivationResultChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IPAddress
        {
            get
            {
                return _IPAddress;
            }
            set
            {
                OnIPAddressChanging(value);
                ReportPropertyChanging("IPAddress");
                _IPAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("IPAddress");
                OnIPAddressChanged();
            }
        }
        private global::System.String _IPAddress;
        partial void OnIPAddressChanging(global::System.String value);
        partial void OnIPAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                OnTimestampChanging(value);
                ReportPropertyChanging("Timestamp");
                _Timestamp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Timestamp");
                OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="License")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class License : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new License object.
        /// </summary>
        /// <param name="licenseId">Initial value of the LicenseId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static License CreateLicense(global::System.Int32 licenseId, global::System.String name)
        {
            License license = new License();
            license.LicenseId = licenseId;
            license.Name = name;
            return license;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseId
        {
            get
            {
                return _LicenseId;
            }
            set
            {
                if (_LicenseId != value)
                {
                    OnLicenseIdChanging(value);
                    ReportPropertyChanging("LicenseId");
                    _LicenseId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseId");
                    OnLicenseIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseId;
        partial void OnLicenseIdChanging(global::System.Int32 value);
        partial void OnLicenseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseSets_Licenses", "LicenseSet")]
        public EntityCollection<LicenseSet> LicenseSets
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseSet>("ScutexServiceModel.FK_LicenseSets_Licenses", "LicenseSet");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseSet>("ScutexServiceModel.FK_LicenseSets_Licenses", "LicenseSet", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="LicenseActivation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseActivation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseActivation object.
        /// </summary>
        /// <param name="licenseActivationId">Initial value of the LicenseActivationId property.</param>
        /// <param name="licenseKeyId">Initial value of the LicenseKeyId property.</param>
        /// <param name="activationToken">Initial value of the ActivationToken property.</param>
        /// <param name="activatedOn">Initial value of the ActivatedOn property.</param>
        /// <param name="activationStatus">Initial value of the ActivationStatus property.</param>
        /// <param name="activationStatusUpdatedOn">Initial value of the ActivationStatusUpdatedOn property.</param>
        public static LicenseActivation CreateLicenseActivation(global::System.Int32 licenseActivationId, global::System.Int32 licenseKeyId, global::System.Guid activationToken, global::System.DateTime activatedOn, global::System.Int32 activationStatus, global::System.DateTime activationStatusUpdatedOn)
        {
            LicenseActivation licenseActivation = new LicenseActivation();
            licenseActivation.LicenseActivationId = licenseActivationId;
            licenseActivation.LicenseKeyId = licenseKeyId;
            licenseActivation.ActivationToken = activationToken;
            licenseActivation.ActivatedOn = activatedOn;
            licenseActivation.ActivationStatus = activationStatus;
            licenseActivation.ActivationStatusUpdatedOn = activationStatusUpdatedOn;
            return licenseActivation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseActivationId
        {
            get
            {
                return _LicenseActivationId;
            }
            set
            {
                if (_LicenseActivationId != value)
                {
                    OnLicenseActivationIdChanging(value);
                    ReportPropertyChanging("LicenseActivationId");
                    _LicenseActivationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseActivationId");
                    OnLicenseActivationIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseActivationId;
        partial void OnLicenseActivationIdChanging(global::System.Int32 value);
        partial void OnLicenseActivationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseKeyId
        {
            get
            {
                return _LicenseKeyId;
            }
            set
            {
                OnLicenseKeyIdChanging(value);
                ReportPropertyChanging("LicenseKeyId");
                _LicenseKeyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseKeyId");
                OnLicenseKeyIdChanged();
            }
        }
        private global::System.Int32 _LicenseKeyId;
        partial void OnLicenseKeyIdChanging(global::System.Int32 value);
        partial void OnLicenseKeyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ActivationToken
        {
            get
            {
                return _ActivationToken;
            }
            set
            {
                OnActivationTokenChanging(value);
                ReportPropertyChanging("ActivationToken");
                _ActivationToken = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivationToken");
                OnActivationTokenChanged();
            }
        }
        private global::System.Guid _ActivationToken;
        partial void OnActivationTokenChanging(global::System.Guid value);
        partial void OnActivationTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Guid> OriginalToken
        {
            get
            {
                return _OriginalToken;
            }
            set
            {
                OnOriginalTokenChanging(value);
                ReportPropertyChanging("OriginalToken");
                _OriginalToken = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OriginalToken");
                OnOriginalTokenChanged();
            }
        }
        private Nullable<global::System.Guid> _OriginalToken;
        partial void OnOriginalTokenChanging(Nullable<global::System.Guid> value);
        partial void OnOriginalTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ActivatedOn
        {
            get
            {
                return _ActivatedOn;
            }
            set
            {
                OnActivatedOnChanging(value);
                ReportPropertyChanging("ActivatedOn");
                _ActivatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivatedOn");
                OnActivatedOnChanged();
            }
        }
        private global::System.DateTime _ActivatedOn;
        partial void OnActivatedOnChanging(global::System.DateTime value);
        partial void OnActivatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HardwareHash
        {
            get
            {
                return _HardwareHash;
            }
            set
            {
                OnHardwareHashChanging(value);
                ReportPropertyChanging("HardwareHash");
                _HardwareHash = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HardwareHash");
                OnHardwareHashChanged();
            }
        }
        private global::System.String _HardwareHash;
        partial void OnHardwareHashChanging(global::System.String value);
        partial void OnHardwareHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActivationStatus
        {
            get
            {
                return _ActivationStatus;
            }
            set
            {
                OnActivationStatusChanging(value);
                ReportPropertyChanging("ActivationStatus");
                _ActivationStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivationStatus");
                OnActivationStatusChanged();
            }
        }
        private global::System.Int32 _ActivationStatus;
        partial void OnActivationStatusChanging(global::System.Int32 value);
        partial void OnActivationStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ActivationStatusUpdatedOn
        {
            get
            {
                return _ActivationStatusUpdatedOn;
            }
            set
            {
                OnActivationStatusUpdatedOnChanging(value);
                ReportPropertyChanging("ActivationStatusUpdatedOn");
                _ActivationStatusUpdatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivationStatusUpdatedOn");
                OnActivationStatusUpdatedOnChanged();
            }
        }
        private global::System.DateTime _ActivationStatusUpdatedOn;
        partial void OnActivationStatusUpdatedOnChanging(global::System.DateTime value);
        partial void OnActivationStatusUpdatedOnChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseActivations_LicenseKeys", "LicenseKey")]
        public LicenseKey LicenseKey
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseKey>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseKey").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseKey>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseKey").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LicenseKey> LicenseKeyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseKey>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LicenseKey>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseKey", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="LicenseKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseKey : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseKey object.
        /// </summary>
        /// <param name="licenseKeyId">Initial value of the LicenseKeyId property.</param>
        /// <param name="licenseSetId">Initial value of the LicenseSetId property.</param>
        /// <param name="key">Initial value of the Key property.</param>
        /// <param name="createdOn">Initial value of the CreatedOn property.</param>
        /// <param name="activationCount">Initial value of the ActivationCount property.</param>
        /// <param name="deactivated">Initial value of the Deactivated property.</param>
        public static LicenseKey CreateLicenseKey(global::System.Int32 licenseKeyId, global::System.Int32 licenseSetId, global::System.String key, global::System.DateTime createdOn, global::System.Int32 activationCount, global::System.Boolean deactivated)
        {
            LicenseKey licenseKey = new LicenseKey();
            licenseKey.LicenseKeyId = licenseKeyId;
            licenseKey.LicenseSetId = licenseSetId;
            licenseKey.Key = key;
            licenseKey.CreatedOn = createdOn;
            licenseKey.ActivationCount = activationCount;
            licenseKey.Deactivated = deactivated;
            return licenseKey;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseKeyId
        {
            get
            {
                return _LicenseKeyId;
            }
            set
            {
                if (_LicenseKeyId != value)
                {
                    OnLicenseKeyIdChanging(value);
                    ReportPropertyChanging("LicenseKeyId");
                    _LicenseKeyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseKeyId");
                    OnLicenseKeyIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseKeyId;
        partial void OnLicenseKeyIdChanging(global::System.Int32 value);
        partial void OnLicenseKeyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetId
        {
            get
            {
                return _LicenseSetId;
            }
            set
            {
                OnLicenseSetIdChanging(value);
                ReportPropertyChanging("LicenseSetId");
                _LicenseSetId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseSetId");
                OnLicenseSetIdChanged();
            }
        }
        private global::System.Int32 _LicenseSetId;
        partial void OnLicenseSetIdChanging(global::System.Int32 value);
        partial void OnLicenseSetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Key
        {
            get
            {
                return _Key;
            }
            set
            {
                OnKeyChanging(value);
                ReportPropertyChanging("Key");
                _Key = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Key");
                OnKeyChanged();
            }
        }
        private global::System.String _Key;
        partial void OnKeyChanging(global::System.String value);
        partial void OnKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private global::System.DateTime _CreatedOn;
        partial void OnCreatedOnChanging(global::System.DateTime value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActivationCount
        {
            get
            {
                return _ActivationCount;
            }
            set
            {
                OnActivationCountChanging(value);
                ReportPropertyChanging("ActivationCount");
                _ActivationCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActivationCount");
                OnActivationCountChanged();
            }
        }
        private global::System.Int32 _ActivationCount;
        partial void OnActivationCountChanging(global::System.Int32 value);
        partial void OnActivationCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Deactivated
        {
            get
            {
                return _Deactivated;
            }
            set
            {
                OnDeactivatedChanging(value);
                ReportPropertyChanging("Deactivated");
                _Deactivated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Deactivated");
                OnDeactivatedChanged();
            }
        }
        private global::System.Boolean _Deactivated;
        partial void OnDeactivatedChanging(global::System.Boolean value);
        partial void OnDeactivatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DeactivatedReason
        {
            get
            {
                return _DeactivatedReason;
            }
            set
            {
                OnDeactivatedReasonChanging(value);
                ReportPropertyChanging("DeactivatedReason");
                _DeactivatedReason = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeactivatedReason");
                OnDeactivatedReasonChanged();
            }
        }
        private Nullable<global::System.Int32> _DeactivatedReason;
        partial void OnDeactivatedReasonChanging(Nullable<global::System.Int32> value);
        partial void OnDeactivatedReasonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeactivatedOn
        {
            get
            {
                return _DeactivatedOn;
            }
            set
            {
                OnDeactivatedOnChanging(value);
                ReportPropertyChanging("DeactivatedOn");
                _DeactivatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeactivatedOn");
                OnDeactivatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeactivatedOn;
        partial void OnDeactivatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnDeactivatedOnChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseActivations_LicenseKeys", "LicenseActivation")]
        public EntityCollection<LicenseActivation> LicenseActivations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseActivation>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseActivation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseActivation>("ScutexServiceModel.FK_LicenseActivations_LicenseKeys", "LicenseActivation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseKeys_LicenseSets", "LicenseSet")]
        public LicenseSet LicenseSet
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseSet").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseSet").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LicenseSet> LicenseSetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseSet");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LicenseSet>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseSet", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="LicenseSet")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseSet : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseSet object.
        /// </summary>
        /// <param name="licenseSetId">Initial value of the LicenseSetId property.</param>
        /// <param name="licenseId">Initial value of the LicenseId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="licenseType">Initial value of the LicenseType property.</param>
        public static LicenseSet CreateLicenseSet(global::System.Int32 licenseSetId, global::System.Int32 licenseId, global::System.String name, global::System.Int32 licenseType)
        {
            LicenseSet licenseSet = new LicenseSet();
            licenseSet.LicenseSetId = licenseSetId;
            licenseSet.LicenseId = licenseId;
            licenseSet.Name = name;
            licenseSet.LicenseType = licenseType;
            return licenseSet;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetId
        {
            get
            {
                return _LicenseSetId;
            }
            set
            {
                if (_LicenseSetId != value)
                {
                    OnLicenseSetIdChanging(value);
                    ReportPropertyChanging("LicenseSetId");
                    _LicenseSetId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseSetId");
                    OnLicenseSetIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseSetId;
        partial void OnLicenseSetIdChanging(global::System.Int32 value);
        partial void OnLicenseSetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseId
        {
            get
            {
                return _LicenseId;
            }
            set
            {
                OnLicenseIdChanging(value);
                ReportPropertyChanging("LicenseId");
                _LicenseId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseId");
                OnLicenseIdChanged();
            }
        }
        private global::System.Int32 _LicenseId;
        partial void OnLicenseIdChanging(global::System.Int32 value);
        partial void OnLicenseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseType
        {
            get
            {
                return _LicenseType;
            }
            set
            {
                OnLicenseTypeChanging(value);
                ReportPropertyChanging("LicenseType");
                _LicenseType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseType");
                OnLicenseTypeChanged();
            }
        }
        private global::System.Int32 _LicenseType;
        partial void OnLicenseTypeChanging(global::System.Int32 value);
        partial void OnLicenseTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaxUsers
        {
            get
            {
                return _MaxUsers;
            }
            set
            {
                OnMaxUsersChanging(value);
                ReportPropertyChanging("MaxUsers");
                _MaxUsers = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxUsers");
                OnMaxUsersChanged();
            }
        }
        private Nullable<global::System.Int32> _MaxUsers;
        partial void OnMaxUsersChanging(Nullable<global::System.Int32> value);
        partial void OnMaxUsersChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseKeys_LicenseSets", "LicenseKey")]
        public EntityCollection<LicenseKey> LicenseKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseKey>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseKey>("ScutexServiceModel.FK_LicenseKeys_LicenseSets", "LicenseKey", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexServiceModel", "FK_LicenseSets_Licenses", "License")]
        public License License
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexServiceModel.FK_LicenseSets_Licenses", "License").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexServiceModel.FK_LicenseSets_Licenses", "License").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<License> LicenseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexServiceModel.FK_LicenseSets_Licenses", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<License>("ScutexServiceModel.FK_LicenseSets_Licenses", "License", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexServiceModel", Name="Master")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Master : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Master object.
        /// </summary>
        /// <param name="masterId">Initial value of the MasterId property.</param>
        /// <param name="serviceId">Initial value of the ServiceId property.</param>
        /// <param name="clientInboundKey">Initial value of the ClientInboundKey property.</param>
        /// <param name="clientOutboundKey">Initial value of the ClientOutboundKey property.</param>
        /// <param name="managementInboundKey">Initial value of the ManagementInboundKey property.</param>
        /// <param name="managementOutboundKey">Initial value of the ManagementOutboundKey property.</param>
        /// <param name="token">Initial value of the Token property.</param>
        /// <param name="initialized">Initial value of the Initialized property.</param>
        public static Master CreateMaster(global::System.Int32 masterId, global::System.Guid serviceId, global::System.String clientInboundKey, global::System.String clientOutboundKey, global::System.String managementInboundKey, global::System.String managementOutboundKey, global::System.String token, global::System.Boolean initialized)
        {
            Master master = new Master();
            master.MasterId = masterId;
            master.ServiceId = serviceId;
            master.ClientInboundKey = clientInboundKey;
            master.ClientOutboundKey = clientOutboundKey;
            master.ManagementInboundKey = managementInboundKey;
            master.ManagementOutboundKey = managementOutboundKey;
            master.Token = token;
            master.Initialized = initialized;
            return master;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MasterId
        {
            get
            {
                return _MasterId;
            }
            set
            {
                if (_MasterId != value)
                {
                    OnMasterIdChanging(value);
                    ReportPropertyChanging("MasterId");
                    _MasterId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MasterId");
                    OnMasterIdChanged();
                }
            }
        }
        private global::System.Int32 _MasterId;
        partial void OnMasterIdChanging(global::System.Int32 value);
        partial void OnMasterIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ServiceId
        {
            get
            {
                return _ServiceId;
            }
            set
            {
                OnServiceIdChanging(value);
                ReportPropertyChanging("ServiceId");
                _ServiceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ServiceId");
                OnServiceIdChanged();
            }
        }
        private global::System.Guid _ServiceId;
        partial void OnServiceIdChanging(global::System.Guid value);
        partial void OnServiceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ClientInboundKey
        {
            get
            {
                return _ClientInboundKey;
            }
            set
            {
                OnClientInboundKeyChanging(value);
                ReportPropertyChanging("ClientInboundKey");
                _ClientInboundKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ClientInboundKey");
                OnClientInboundKeyChanged();
            }
        }
        private global::System.String _ClientInboundKey;
        partial void OnClientInboundKeyChanging(global::System.String value);
        partial void OnClientInboundKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ClientOutboundKey
        {
            get
            {
                return _ClientOutboundKey;
            }
            set
            {
                OnClientOutboundKeyChanging(value);
                ReportPropertyChanging("ClientOutboundKey");
                _ClientOutboundKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ClientOutboundKey");
                OnClientOutboundKeyChanged();
            }
        }
        private global::System.String _ClientOutboundKey;
        partial void OnClientOutboundKeyChanging(global::System.String value);
        partial void OnClientOutboundKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementInboundKey
        {
            get
            {
                return _ManagementInboundKey;
            }
            set
            {
                OnManagementInboundKeyChanging(value);
                ReportPropertyChanging("ManagementInboundKey");
                _ManagementInboundKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementInboundKey");
                OnManagementInboundKeyChanged();
            }
        }
        private global::System.String _ManagementInboundKey;
        partial void OnManagementInboundKeyChanging(global::System.String value);
        partial void OnManagementInboundKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementOutboundKey
        {
            get
            {
                return _ManagementOutboundKey;
            }
            set
            {
                OnManagementOutboundKeyChanging(value);
                ReportPropertyChanging("ManagementOutboundKey");
                _ManagementOutboundKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementOutboundKey");
                OnManagementOutboundKeyChanged();
            }
        }
        private global::System.String _ManagementOutboundKey;
        partial void OnManagementOutboundKeyChanging(global::System.String value);
        partial void OnManagementOutboundKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Initialized
        {
            get
            {
                return _Initialized;
            }
            set
            {
                OnInitializedChanging(value);
                ReportPropertyChanging("Initialized");
                _Initialized = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Initialized");
                OnInitializedChanged();
            }
        }
        private global::System.Boolean _Initialized;
        partial void OnInitializedChanging(global::System.Boolean value);
        partial void OnInitializedChanged();

        #endregion
    
    }

    #endregion
    
}
