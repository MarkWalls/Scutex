//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("ScutexModel", "FK_Features_Products", "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Product), "Feature", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Feature), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_LicenseSetFeatures_Features", "Feature", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Feature), "LicenseSetFeature", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseSetFeature), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.KeyGeneratorType), "License", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.License), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_LicenseKeys_LicenseKeys", "LicenseSet", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseSet), "LicenseKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseKey), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_Licenses_Products", "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Product), "License", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.License), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_Licenses_Services", "Service", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Service), "License", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.License), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_LicenseSets_Licenses", "License", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.License), "LicenseSet", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseSet), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_TrialSettings_Licenses", "License", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.License), "TrialSetting", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.TrialSetting), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_LicenseSetFeatures_LicenseSets", "LicenseSet", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseSet), "LicenseSetFeature", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.LicenseSetFeature), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_ProductEditions_Products", "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Product), "ProductEdition", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.ProductEdition), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_ProductVersions_Products", "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.Product), "ProductVersion", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.ProductVersion), true)]
[assembly: EdmRelationshipAttribute("ScutexModel", "FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.TrialExpirationOption), "TrialSetting", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WaveTech.Scutex.Repositories.ManagerDataRepository.TrialSetting), true)]

#endregion

namespace WaveTech.Scutex.Repositories.ManagerDataRepository
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class ScutexEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ScutexEntities object using the connection string found in the 'ScutexEntities' section of the application configuration file.
        /// </summary>
        public ScutexEntities() : base("name=ScutexEntities", "ScutexEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ScutexEntities object.
        /// </summary>
        public ScutexEntities(string connectionString) : base(connectionString, "ScutexEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ScutexEntities object.
        /// </summary>
        public ScutexEntities(EntityConnection connection) : base(connection, "ScutexEntities")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DBVersion> DBVersions
        {
            get
            {
                if ((_DBVersions == null))
                {
                    _DBVersions = base.CreateObjectSet<DBVersion>("DBVersions");
                }
                return _DBVersions;
            }
        }
        private ObjectSet<DBVersion> _DBVersions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Feature> Features
        {
            get
            {
                if ((_Features == null))
                {
                    _Features = base.CreateObjectSet<Feature>("Features");
                }
                return _Features;
            }
        }
        private ObjectSet<Feature> _Features;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<KeyGeneratorType> KeyGeneratorTypes
        {
            get
            {
                if ((_KeyGeneratorTypes == null))
                {
                    _KeyGeneratorTypes = base.CreateObjectSet<KeyGeneratorType>("KeyGeneratorTypes");
                }
                return _KeyGeneratorTypes;
            }
        }
        private ObjectSet<KeyGeneratorType> _KeyGeneratorTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseKey> LicenseKeys
        {
            get
            {
                if ((_LicenseKeys == null))
                {
                    _LicenseKeys = base.CreateObjectSet<LicenseKey>("LicenseKeys");
                }
                return _LicenseKeys;
            }
        }
        private ObjectSet<LicenseKey> _LicenseKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<License> Licenses
        {
            get
            {
                if ((_Licenses == null))
                {
                    _Licenses = base.CreateObjectSet<License>("Licenses");
                }
                return _Licenses;
            }
        }
        private ObjectSet<License> _Licenses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseSetFeature> LicenseSetFeatures
        {
            get
            {
                if ((_LicenseSetFeatures == null))
                {
                    _LicenseSetFeatures = base.CreateObjectSet<LicenseSetFeature>("LicenseSetFeatures");
                }
                return _LicenseSetFeatures;
            }
        }
        private ObjectSet<LicenseSetFeature> _LicenseSetFeatures;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LicenseSet> LicenseSets
        {
            get
            {
                if ((_LicenseSets == null))
                {
                    _LicenseSets = base.CreateObjectSet<LicenseSet>("LicenseSets");
                }
                return _LicenseSets;
            }
        }
        private ObjectSet<LicenseSet> _LicenseSets;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProductEdition> ProductEditions
        {
            get
            {
                if ((_ProductEditions == null))
                {
                    _ProductEditions = base.CreateObjectSet<ProductEdition>("ProductEditions");
                }
                return _ProductEditions;
            }
        }
        private ObjectSet<ProductEdition> _ProductEditions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Product> Products
        {
            get
            {
                if ((_Products == null))
                {
                    _Products = base.CreateObjectSet<Product>("Products");
                }
                return _Products;
            }
        }
        private ObjectSet<Product> _Products;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ProductVersion> ProductVersions
        {
            get
            {
                if ((_ProductVersions == null))
                {
                    _ProductVersions = base.CreateObjectSet<ProductVersion>("ProductVersions");
                }
                return _ProductVersions;
            }
        }
        private ObjectSet<ProductVersion> _ProductVersions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Service> Services
        {
            get
            {
                if ((_Services == null))
                {
                    _Services = base.CreateObjectSet<Service>("Services");
                }
                return _Services;
            }
        }
        private ObjectSet<Service> _Services;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrialExpirationOption> TrialExpirationOptions
        {
            get
            {
                if ((_TrialExpirationOptions == null))
                {
                    _TrialExpirationOptions = base.CreateObjectSet<TrialExpirationOption>("TrialExpirationOptions");
                }
                return _TrialExpirationOptions;
            }
        }
        private ObjectSet<TrialExpirationOption> _TrialExpirationOptions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrialSetting> TrialSettings
        {
            get
            {
                if ((_TrialSettings == null))
                {
                    _TrialSettings = base.CreateObjectSet<TrialSetting>("TrialSettings");
                }
                return _TrialSettings;
            }
        }
        private ObjectSet<TrialSetting> _TrialSettings;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DBVersions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDBVersions(DBVersion dBVersion)
        {
            base.AddObject("DBVersions", dBVersion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Features EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFeatures(Feature feature)
        {
            base.AddObject("Features", feature);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the KeyGeneratorTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToKeyGeneratorTypes(KeyGeneratorType keyGeneratorType)
        {
            base.AddObject("KeyGeneratorTypes", keyGeneratorType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseKeys(LicenseKey licenseKey)
        {
            base.AddObject("LicenseKeys", licenseKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Licenses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenses(License license)
        {
            base.AddObject("Licenses", license);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseSetFeatures EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseSetFeatures(LicenseSetFeature licenseSetFeature)
        {
            base.AddObject("LicenseSetFeatures", licenseSetFeature);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LicenseSets EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLicenseSets(LicenseSet licenseSet)
        {
            base.AddObject("LicenseSets", licenseSet);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProductEditions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProductEditions(ProductEdition productEdition)
        {
            base.AddObject("ProductEditions", productEdition);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Products EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProducts(Product product)
        {
            base.AddObject("Products", product);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ProductVersions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProductVersions(ProductVersion productVersion)
        {
            base.AddObject("ProductVersions", productVersion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Services EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServices(Service service)
        {
            base.AddObject("Services", service);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TrialExpirationOptions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTrialExpirationOptions(TrialExpirationOption trialExpirationOption)
        {
            base.AddObject("TrialExpirationOptions", trialExpirationOption);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TrialSettings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTrialSettings(TrialSetting trialSetting)
        {
            base.AddObject("TrialSettings", trialSetting);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="DBVersion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DBVersion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DBVersion object.
        /// </summary>
        /// <param name="dBVersionId">Initial value of the DBVersionId property.</param>
        public static DBVersion CreateDBVersion(global::System.Int32 dBVersionId)
        {
            DBVersion dBVersion = new DBVersion();
            dBVersion.DBVersionId = dBVersionId;
            return dBVersion;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DBVersionId
        {
            get
            {
                return _DBVersionId;
            }
            set
            {
                if (_DBVersionId != value)
                {
                    OnDBVersionIdChanging(value);
                    ReportPropertyChanging("DBVersionId");
                    _DBVersionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DBVersionId");
                    OnDBVersionIdChanged();
                }
            }
        }
        private global::System.Int32 _DBVersionId;
        partial void OnDBVersionIdChanging(global::System.Int32 value);
        partial void OnDBVersionIdChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="Feature")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Feature : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Feature object.
        /// </summary>
        /// <param name="featureId">Initial value of the FeatureId property.</param>
        /// <param name="productId">Initial value of the ProductId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="uniquePad">Initial value of the UniquePad property.</param>
        public static Feature CreateFeature(global::System.Int32 featureId, global::System.Int32 productId, global::System.String name, global::System.Guid uniquePad)
        {
            Feature feature = new Feature();
            feature.FeatureId = featureId;
            feature.ProductId = productId;
            feature.Name = name;
            feature.UniquePad = uniquePad;
            return feature;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FeatureId
        {
            get
            {
                return _FeatureId;
            }
            set
            {
                if (_FeatureId != value)
                {
                    OnFeatureIdChanging(value);
                    ReportPropertyChanging("FeatureId");
                    _FeatureId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FeatureId");
                    OnFeatureIdChanged();
                }
            }
        }
        private global::System.Int32 _FeatureId;
        partial void OnFeatureIdChanging(global::System.Int32 value);
        partial void OnFeatureIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductId
        {
            get
            {
                return _ProductId;
            }
            set
            {
                OnProductIdChanging(value);
                ReportPropertyChanging("ProductId");
                _ProductId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProductId");
                OnProductIdChanged();
            }
        }
        private global::System.Int32 _ProductId;
        partial void OnProductIdChanging(global::System.Int32 value);
        partial void OnProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniquePad
        {
            get
            {
                return _UniquePad;
            }
            set
            {
                OnUniquePadChanging(value);
                ReportPropertyChanging("UniquePad");
                _UniquePad = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniquePad");
                OnUniquePadChanged();
            }
        }
        private global::System.Guid _UniquePad;
        partial void OnUniquePadChanging(global::System.Guid value);
        partial void OnUniquePadChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Features_Products", "Product")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Features_Products", "Product").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Features_Products", "Product").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Features_Products", "Product");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ScutexModel.FK_Features_Products", "Product", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSetFeatures_Features", "LicenseSetFeature")]
        public EntityCollection<LicenseSetFeature> LicenseSetFeatures
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseSetFeature>("ScutexModel.FK_LicenseSetFeatures_Features", "LicenseSetFeature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseSetFeature>("ScutexModel.FK_LicenseSetFeatures_Features", "LicenseSetFeature", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="KeyGeneratorType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class KeyGeneratorType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new KeyGeneratorType object.
        /// </summary>
        /// <param name="keyGeneratorTypeId">Initial value of the KeyGeneratorTypeId property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static KeyGeneratorType CreateKeyGeneratorType(global::System.Int32 keyGeneratorTypeId, global::System.String description)
        {
            KeyGeneratorType keyGeneratorType = new KeyGeneratorType();
            keyGeneratorType.KeyGeneratorTypeId = keyGeneratorTypeId;
            keyGeneratorType.Description = description;
            return keyGeneratorType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 KeyGeneratorTypeId
        {
            get
            {
                return _KeyGeneratorTypeId;
            }
            set
            {
                if (_KeyGeneratorTypeId != value)
                {
                    OnKeyGeneratorTypeIdChanging(value);
                    ReportPropertyChanging("KeyGeneratorTypeId");
                    _KeyGeneratorTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("KeyGeneratorTypeId");
                    OnKeyGeneratorTypeIdChanged();
                }
            }
        }
        private global::System.Int32 _KeyGeneratorTypeId;
        partial void OnKeyGeneratorTypeIdChanging(global::System.Int32 value);
        partial void OnKeyGeneratorTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_KeyGeneratorTypes", "License")]
        public EntityCollection<License> Licenses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<License>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<License>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "License", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="License")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class License : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new License object.
        /// </summary>
        /// <param name="licenseId">Initial value of the LicenseId property.</param>
        /// <param name="productId">Initial value of the ProductId property.</param>
        /// <param name="keyGeneratorTypeId">Initial value of the KeyGeneratorTypeId property.</param>
        /// <param name="uniqueId">Initial value of the UniqueId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="privateKey">Initial value of the PrivateKey property.</param>
        /// <param name="publicKey">Initial value of the PublicKey property.</param>
        /// <param name="createdOn">Initial value of the CreatedOn property.</param>
        /// <param name="trialTryButtonDelay">Initial value of the TrialTryButtonDelay property.</param>
        public static License CreateLicense(global::System.Int32 licenseId, global::System.Int32 productId, global::System.Int32 keyGeneratorTypeId, global::System.Guid uniqueId, global::System.String name, global::System.String privateKey, global::System.String publicKey, global::System.DateTime createdOn, global::System.Int32 trialTryButtonDelay)
        {
            License license = new License();
            license.LicenseId = licenseId;
            license.ProductId = productId;
            license.KeyGeneratorTypeId = keyGeneratorTypeId;
            license.UniqueId = uniqueId;
            license.Name = name;
            license.PrivateKey = privateKey;
            license.PublicKey = publicKey;
            license.CreatedOn = createdOn;
            license.TrialTryButtonDelay = trialTryButtonDelay;
            return license;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseId
        {
            get
            {
                return _LicenseId;
            }
            set
            {
                if (_LicenseId != value)
                {
                    OnLicenseIdChanging(value);
                    ReportPropertyChanging("LicenseId");
                    _LicenseId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseId");
                    OnLicenseIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseId;
        partial void OnLicenseIdChanging(global::System.Int32 value);
        partial void OnLicenseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductId
        {
            get
            {
                return _ProductId;
            }
            set
            {
                OnProductIdChanging(value);
                ReportPropertyChanging("ProductId");
                _ProductId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProductId");
                OnProductIdChanged();
            }
        }
        private global::System.Int32 _ProductId;
        partial void OnProductIdChanging(global::System.Int32 value);
        partial void OnProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 KeyGeneratorTypeId
        {
            get
            {
                return _KeyGeneratorTypeId;
            }
            set
            {
                OnKeyGeneratorTypeIdChanging(value);
                ReportPropertyChanging("KeyGeneratorTypeId");
                _KeyGeneratorTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("KeyGeneratorTypeId");
                OnKeyGeneratorTypeIdChanged();
            }
        }
        private global::System.Int32 _KeyGeneratorTypeId;
        partial void OnKeyGeneratorTypeIdChanging(global::System.Int32 value);
        partial void OnKeyGeneratorTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniqueId
        {
            get
            {
                return _UniqueId;
            }
            set
            {
                OnUniqueIdChanging(value);
                ReportPropertyChanging("UniqueId");
                _UniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniqueId");
                OnUniqueIdChanged();
            }
        }
        private global::System.Guid _UniqueId;
        partial void OnUniqueIdChanging(global::System.Guid value);
        partial void OnUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PrivateKey
        {
            get
            {
                return _PrivateKey;
            }
            set
            {
                OnPrivateKeyChanging(value);
                ReportPropertyChanging("PrivateKey");
                _PrivateKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PrivateKey");
                OnPrivateKeyChanged();
            }
        }
        private global::System.String _PrivateKey;
        partial void OnPrivateKeyChanging(global::System.String value);
        partial void OnPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PublicKey
        {
            get
            {
                return _PublicKey;
            }
            set
            {
                OnPublicKeyChanging(value);
                ReportPropertyChanging("PublicKey");
                _PublicKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PublicKey");
                OnPublicKeyChanged();
            }
        }
        private global::System.String _PublicKey;
        partial void OnPublicKeyChanging(global::System.String value);
        partial void OnPublicKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String BuyNowUrl
        {
            get
            {
                return _BuyNowUrl;
            }
            set
            {
                OnBuyNowUrlChanging(value);
                ReportPropertyChanging("BuyNowUrl");
                _BuyNowUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("BuyNowUrl");
                OnBuyNowUrlChanged();
            }
        }
        private global::System.String _BuyNowUrl;
        partial void OnBuyNowUrlChanging(global::System.String value);
        partial void OnBuyNowUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProductUrl
        {
            get
            {
                return _ProductUrl;
            }
            set
            {
                OnProductUrlChanging(value);
                ReportPropertyChanging("ProductUrl");
                _ProductUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProductUrl");
                OnProductUrlChanged();
            }
        }
        private global::System.String _ProductUrl;
        partial void OnProductUrlChanging(global::System.String value);
        partial void OnProductUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EulaUrl
        {
            get
            {
                return _EulaUrl;
            }
            set
            {
                OnEulaUrlChanging(value);
                ReportPropertyChanging("EulaUrl");
                _EulaUrl = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EulaUrl");
                OnEulaUrlChanged();
            }
        }
        private global::System.String _EulaUrl;
        partial void OnEulaUrlChanging(global::System.String value);
        partial void OnEulaUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private global::System.DateTime _CreatedOn;
        partial void OnCreatedOnChanging(global::System.DateTime value);
        partial void OnCreatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> UpdatedOn
        {
            get
            {
                return _UpdatedOn;
            }
            set
            {
                OnUpdatedOnChanging(value);
                ReportPropertyChanging("UpdatedOn");
                _UpdatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UpdatedOn");
                OnUpdatedOnChanged();
            }
        }
        private Nullable<global::System.DateTime> _UpdatedOn;
        partial void OnUpdatedOnChanging(Nullable<global::System.DateTime> value);
        partial void OnUpdatedOnChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TrialTryButtonDelay
        {
            get
            {
                return _TrialTryButtonDelay;
            }
            set
            {
                OnTrialTryButtonDelayChanging(value);
                ReportPropertyChanging("TrialTryButtonDelay");
                _TrialTryButtonDelay = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TrialTryButtonDelay");
                OnTrialTryButtonDelayChanged();
            }
        }
        private global::System.Int32 _TrialTryButtonDelay;
        partial void OnTrialTryButtonDelayChanging(global::System.Int32 value);
        partial void OnTrialTryButtonDelayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SupportEmail
        {
            get
            {
                return _SupportEmail;
            }
            set
            {
                OnSupportEmailChanging(value);
                ReportPropertyChanging("SupportEmail");
                _SupportEmail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SupportEmail");
                OnSupportEmailChanged();
            }
        }
        private global::System.String _SupportEmail;
        partial void OnSupportEmailChanging(global::System.String value);
        partial void OnSupportEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SalesEmail
        {
            get
            {
                return _SalesEmail;
            }
            set
            {
                OnSalesEmailChanging(value);
                ReportPropertyChanging("SalesEmail");
                _SalesEmail = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SalesEmail");
                OnSalesEmailChanged();
            }
        }
        private global::System.String _SalesEmail;
        partial void OnSalesEmailChanging(global::System.String value);
        partial void OnSalesEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ServiceId
        {
            get
            {
                return _ServiceId;
            }
            set
            {
                OnServiceIdChanging(value);
                ReportPropertyChanging("ServiceId");
                _ServiceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ServiceId");
                OnServiceIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ServiceId;
        partial void OnServiceIdChanging(Nullable<global::System.Int32> value);
        partial void OnServiceIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType")]
        public KeyGeneratorType KeyGeneratorType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeyGeneratorType>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeyGeneratorType>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<KeyGeneratorType> KeyGeneratorTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<KeyGeneratorType>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<KeyGeneratorType>("ScutexModel.FK_Licenses_KeyGeneratorTypes", "KeyGeneratorType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_Products", "Product")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Licenses_Products", "Product").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Licenses_Products", "Product").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_Licenses_Products", "Product");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ScutexModel.FK_Licenses_Products", "Product", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_Services", "Service")]
        public Service Service
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Service>("ScutexModel.FK_Licenses_Services", "Service").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Service>("ScutexModel.FK_Licenses_Services", "Service").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Service> ServiceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Service>("ScutexModel.FK_Licenses_Services", "Service");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Service>("ScutexModel.FK_Licenses_Services", "Service", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSets_Licenses", "LicenseSet")]
        public EntityCollection<LicenseSet> LicenseSets
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseSet>("ScutexModel.FK_LicenseSets_Licenses", "LicenseSet");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseSet>("ScutexModel.FK_LicenseSets_Licenses", "LicenseSet", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_TrialSettings_Licenses", "TrialSetting")]
        public EntityCollection<TrialSetting> TrialSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TrialSetting>("ScutexModel.FK_TrialSettings_Licenses", "TrialSetting");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TrialSetting>("ScutexModel.FK_TrialSettings_Licenses", "TrialSetting", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="LicenseKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseKey : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseKey object.
        /// </summary>
        /// <param name="licenseKeyId">Initial value of the LicenseKeyId property.</param>
        /// <param name="licenseSetId">Initial value of the LicenseSetId property.</param>
        /// <param name="licenseKey1">Initial value of the LicenseKey1 property.</param>
        /// <param name="hashedLicenseKey">Initial value of the HashedLicenseKey property.</param>
        /// <param name="createdOn">Initial value of the CreatedOn property.</param>
        public static LicenseKey CreateLicenseKey(global::System.Int64 licenseKeyId, global::System.Int32 licenseSetId, global::System.String licenseKey1, global::System.String hashedLicenseKey, global::System.DateTime createdOn)
        {
            LicenseKey licenseKey = new LicenseKey();
            licenseKey.LicenseKeyId = licenseKeyId;
            licenseKey.LicenseSetId = licenseSetId;
            licenseKey.LicenseKey1 = licenseKey1;
            licenseKey.HashedLicenseKey = hashedLicenseKey;
            licenseKey.CreatedOn = createdOn;
            return licenseKey;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LicenseKeyId
        {
            get
            {
                return _LicenseKeyId;
            }
            set
            {
                if (_LicenseKeyId != value)
                {
                    OnLicenseKeyIdChanging(value);
                    ReportPropertyChanging("LicenseKeyId");
                    _LicenseKeyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseKeyId");
                    OnLicenseKeyIdChanged();
                }
            }
        }
        private global::System.Int64 _LicenseKeyId;
        partial void OnLicenseKeyIdChanging(global::System.Int64 value);
        partial void OnLicenseKeyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetId
        {
            get
            {
                return _LicenseSetId;
            }
            set
            {
                OnLicenseSetIdChanging(value);
                ReportPropertyChanging("LicenseSetId");
                _LicenseSetId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseSetId");
                OnLicenseSetIdChanged();
            }
        }
        private global::System.Int32 _LicenseSetId;
        partial void OnLicenseSetIdChanging(global::System.Int32 value);
        partial void OnLicenseSetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LicenseKey1
        {
            get
            {
                return _LicenseKey1;
            }
            set
            {
                OnLicenseKey1Changing(value);
                ReportPropertyChanging("LicenseKey1");
                _LicenseKey1 = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LicenseKey1");
                OnLicenseKey1Changed();
            }
        }
        private global::System.String _LicenseKey1;
        partial void OnLicenseKey1Changing(global::System.String value);
        partial void OnLicenseKey1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HashedLicenseKey
        {
            get
            {
                return _HashedLicenseKey;
            }
            set
            {
                OnHashedLicenseKeyChanging(value);
                ReportPropertyChanging("HashedLicenseKey");
                _HashedLicenseKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HashedLicenseKey");
                OnHashedLicenseKeyChanged();
            }
        }
        private global::System.String _HashedLicenseKey;
        partial void OnHashedLicenseKeyChanging(global::System.String value);
        partial void OnHashedLicenseKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedOn
        {
            get
            {
                return _CreatedOn;
            }
            set
            {
                OnCreatedOnChanging(value);
                ReportPropertyChanging("CreatedOn");
                _CreatedOn = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedOn");
                OnCreatedOnChanged();
            }
        }
        private global::System.DateTime _CreatedOn;
        partial void OnCreatedOnChanging(global::System.DateTime value);
        partial void OnCreatedOnChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseKeys_LicenseKeys", "LicenseSet")]
        public LicenseSet LicenseSet
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseSet").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseSet").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LicenseSet> LicenseSetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseSet");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LicenseSet>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseSet", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="LicenseSet")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseSet : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseSet object.
        /// </summary>
        /// <param name="licenseSetId">Initial value of the LicenseSetId property.</param>
        /// <param name="licenseId">Initial value of the LicenseId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="licenseType">Initial value of the LicenseType property.</param>
        /// <param name="uniquePad">Initial value of the UniquePad property.</param>
        public static LicenseSet CreateLicenseSet(global::System.Int32 licenseSetId, global::System.Int32 licenseId, global::System.String name, global::System.Int32 licenseType, global::System.Guid uniquePad)
        {
            LicenseSet licenseSet = new LicenseSet();
            licenseSet.LicenseSetId = licenseSetId;
            licenseSet.LicenseId = licenseId;
            licenseSet.Name = name;
            licenseSet.LicenseType = licenseType;
            licenseSet.UniquePad = uniquePad;
            return licenseSet;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetId
        {
            get
            {
                return _LicenseSetId;
            }
            set
            {
                if (_LicenseSetId != value)
                {
                    OnLicenseSetIdChanging(value);
                    ReportPropertyChanging("LicenseSetId");
                    _LicenseSetId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseSetId");
                    OnLicenseSetIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseSetId;
        partial void OnLicenseSetIdChanging(global::System.Int32 value);
        partial void OnLicenseSetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseId
        {
            get
            {
                return _LicenseId;
            }
            set
            {
                OnLicenseIdChanging(value);
                ReportPropertyChanging("LicenseId");
                _LicenseId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseId");
                OnLicenseIdChanged();
            }
        }
        private global::System.Int32 _LicenseId;
        partial void OnLicenseIdChanging(global::System.Int32 value);
        partial void OnLicenseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseType
        {
            get
            {
                return _LicenseType;
            }
            set
            {
                OnLicenseTypeChanging(value);
                ReportPropertyChanging("LicenseType");
                _LicenseType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseType");
                OnLicenseTypeChanged();
            }
        }
        private global::System.Int32 _LicenseType;
        partial void OnLicenseTypeChanging(global::System.Int32 value);
        partial void OnLicenseTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniquePad
        {
            get
            {
                return _UniquePad;
            }
            set
            {
                OnUniquePadChanging(value);
                ReportPropertyChanging("UniquePad");
                _UniquePad = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniquePad");
                OnUniquePadChanged();
            }
        }
        private global::System.Guid _UniquePad;
        partial void OnUniquePadChanging(global::System.Guid value);
        partial void OnUniquePadChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaxUsers
        {
            get
            {
                return _MaxUsers;
            }
            set
            {
                OnMaxUsersChanging(value);
                ReportPropertyChanging("MaxUsers");
                _MaxUsers = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxUsers");
                OnMaxUsersChanged();
            }
        }
        private Nullable<global::System.Int32> _MaxUsers;
        partial void OnMaxUsersChanging(Nullable<global::System.Int32> value);
        partial void OnMaxUsersChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseKeys_LicenseKeys", "LicenseKey")]
        public EntityCollection<LicenseKey> LicenseKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseKey>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseKey>("ScutexModel.FK_LicenseKeys_LicenseKeys", "LicenseKey", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSets_Licenses", "License")]
        public License License
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_LicenseSets_Licenses", "License").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_LicenseSets_Licenses", "License").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<License> LicenseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_LicenseSets_Licenses", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<License>("ScutexModel.FK_LicenseSets_Licenses", "License", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSetFeatures_LicenseSets", "LicenseSetFeature")]
        public EntityCollection<LicenseSetFeature> LicenseSetFeatures
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LicenseSetFeature>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSetFeature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LicenseSetFeature>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSetFeature", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="LicenseSetFeature")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LicenseSetFeature : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LicenseSetFeature object.
        /// </summary>
        /// <param name="licenseSetFeatureId">Initial value of the LicenseSetFeatureId property.</param>
        /// <param name="licenseSetId">Initial value of the LicenseSetId property.</param>
        /// <param name="featureId">Initial value of the FeatureId property.</param>
        public static LicenseSetFeature CreateLicenseSetFeature(global::System.Int32 licenseSetFeatureId, global::System.Int32 licenseSetId, global::System.Int32 featureId)
        {
            LicenseSetFeature licenseSetFeature = new LicenseSetFeature();
            licenseSetFeature.LicenseSetFeatureId = licenseSetFeatureId;
            licenseSetFeature.LicenseSetId = licenseSetId;
            licenseSetFeature.FeatureId = featureId;
            return licenseSetFeature;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetFeatureId
        {
            get
            {
                return _LicenseSetFeatureId;
            }
            set
            {
                if (_LicenseSetFeatureId != value)
                {
                    OnLicenseSetFeatureIdChanging(value);
                    ReportPropertyChanging("LicenseSetFeatureId");
                    _LicenseSetFeatureId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LicenseSetFeatureId");
                    OnLicenseSetFeatureIdChanged();
                }
            }
        }
        private global::System.Int32 _LicenseSetFeatureId;
        partial void OnLicenseSetFeatureIdChanging(global::System.Int32 value);
        partial void OnLicenseSetFeatureIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseSetId
        {
            get
            {
                return _LicenseSetId;
            }
            set
            {
                OnLicenseSetIdChanging(value);
                ReportPropertyChanging("LicenseSetId");
                _LicenseSetId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseSetId");
                OnLicenseSetIdChanged();
            }
        }
        private global::System.Int32 _LicenseSetId;
        partial void OnLicenseSetIdChanging(global::System.Int32 value);
        partial void OnLicenseSetIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FeatureId
        {
            get
            {
                return _FeatureId;
            }
            set
            {
                OnFeatureIdChanging(value);
                ReportPropertyChanging("FeatureId");
                _FeatureId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FeatureId");
                OnFeatureIdChanged();
            }
        }
        private global::System.Int32 _FeatureId;
        partial void OnFeatureIdChanging(global::System.Int32 value);
        partial void OnFeatureIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSetFeatures_Features", "Feature")]
        public Feature Feature
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Feature>("ScutexModel.FK_LicenseSetFeatures_Features", "Feature").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Feature>("ScutexModel.FK_LicenseSetFeatures_Features", "Feature").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Feature> FeatureReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Feature>("ScutexModel.FK_LicenseSetFeatures_Features", "Feature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Feature>("ScutexModel.FK_LicenseSetFeatures_Features", "Feature", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_LicenseSetFeatures_LicenseSets", "LicenseSet")]
        public LicenseSet LicenseSet
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSet").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSet").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LicenseSet> LicenseSetReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LicenseSet>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSet");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LicenseSet>("ScutexModel.FK_LicenseSetFeatures_LicenseSets", "LicenseSet", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="Product")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Product : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Product object.
        /// </summary>
        /// <param name="productId">Initial value of the ProductId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="uniquePad">Initial value of the UniquePad property.</param>
        public static Product CreateProduct(global::System.Int32 productId, global::System.String name, global::System.String description, global::System.String uniquePad)
        {
            Product product = new Product();
            product.ProductId = productId;
            product.Name = name;
            product.Description = description;
            product.UniquePad = uniquePad;
            return product;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductId
        {
            get
            {
                return _ProductId;
            }
            set
            {
                if (_ProductId != value)
                {
                    OnProductIdChanging(value);
                    ReportPropertyChanging("ProductId");
                    _ProductId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProductId");
                    OnProductIdChanged();
                }
            }
        }
        private global::System.Int32 _ProductId;
        partial void OnProductIdChanging(global::System.Int32 value);
        partial void OnProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UniquePad
        {
            get
            {
                return _UniquePad;
            }
            set
            {
                OnUniquePadChanging(value);
                ReportPropertyChanging("UniquePad");
                _UniquePad = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UniquePad");
                OnUniquePadChanged();
            }
        }
        private global::System.String _UniquePad;
        partial void OnUniquePadChanging(global::System.String value);
        partial void OnUniquePadChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Features_Products", "Feature")]
        public EntityCollection<Feature> Features
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Feature>("ScutexModel.FK_Features_Products", "Feature");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Feature>("ScutexModel.FK_Features_Products", "Feature", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_Products", "License")]
        public EntityCollection<License> Licenses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<License>("ScutexModel.FK_Licenses_Products", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<License>("ScutexModel.FK_Licenses_Products", "License", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_ProductEditions_Products", "ProductEdition")]
        public EntityCollection<ProductEdition> ProductEditions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductEdition>("ScutexModel.FK_ProductEditions_Products", "ProductEdition");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductEdition>("ScutexModel.FK_ProductEditions_Products", "ProductEdition", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_ProductVersions_Products", "ProductVersion")]
        public EntityCollection<ProductVersion> ProductVersions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductVersion>("ScutexModel.FK_ProductVersions_Products", "ProductVersion");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductVersion>("ScutexModel.FK_ProductVersions_Products", "ProductVersion", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="ProductEdition")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProductEdition : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ProductEdition object.
        /// </summary>
        /// <param name="productEditionId">Initial value of the ProductEditionId property.</param>
        /// <param name="productId">Initial value of the ProductId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static ProductEdition CreateProductEdition(global::System.Int32 productEditionId, global::System.Int32 productId, global::System.String name)
        {
            ProductEdition productEdition = new ProductEdition();
            productEdition.ProductEditionId = productEditionId;
            productEdition.ProductId = productId;
            productEdition.Name = name;
            return productEdition;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductEditionId
        {
            get
            {
                return _ProductEditionId;
            }
            set
            {
                if (_ProductEditionId != value)
                {
                    OnProductEditionIdChanging(value);
                    ReportPropertyChanging("ProductEditionId");
                    _ProductEditionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProductEditionId");
                    OnProductEditionIdChanged();
                }
            }
        }
        private global::System.Int32 _ProductEditionId;
        partial void OnProductEditionIdChanging(global::System.Int32 value);
        partial void OnProductEditionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductId
        {
            get
            {
                return _ProductId;
            }
            set
            {
                OnProductIdChanging(value);
                ReportPropertyChanging("ProductId");
                _ProductId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProductId");
                OnProductIdChanged();
            }
        }
        private global::System.Int32 _ProductId;
        partial void OnProductIdChanging(global::System.Int32 value);
        partial void OnProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_ProductEditions_Products", "Product")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductEditions_Products", "Product").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductEditions_Products", "Product").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductEditions_Products", "Product");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ScutexModel.FK_ProductEditions_Products", "Product", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="ProductVersion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProductVersion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ProductVersion object.
        /// </summary>
        /// <param name="productVersionId">Initial value of the ProductVersionId property.</param>
        /// <param name="productId">Initial value of the ProductId property.</param>
        /// <param name="versionDisplay">Initial value of the VersionDisplay property.</param>
        /// <param name="versionMask">Initial value of the VersionMask property.</param>
        public static ProductVersion CreateProductVersion(global::System.Int32 productVersionId, global::System.Int32 productId, global::System.String versionDisplay, global::System.String versionMask)
        {
            ProductVersion productVersion = new ProductVersion();
            productVersion.ProductVersionId = productVersionId;
            productVersion.ProductId = productId;
            productVersion.VersionDisplay = versionDisplay;
            productVersion.VersionMask = versionMask;
            return productVersion;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductVersionId
        {
            get
            {
                return _ProductVersionId;
            }
            set
            {
                if (_ProductVersionId != value)
                {
                    OnProductVersionIdChanging(value);
                    ReportPropertyChanging("ProductVersionId");
                    _ProductVersionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProductVersionId");
                    OnProductVersionIdChanged();
                }
            }
        }
        private global::System.Int32 _ProductVersionId;
        partial void OnProductVersionIdChanging(global::System.Int32 value);
        partial void OnProductVersionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProductId
        {
            get
            {
                return _ProductId;
            }
            set
            {
                OnProductIdChanging(value);
                ReportPropertyChanging("ProductId");
                _ProductId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProductId");
                OnProductIdChanged();
            }
        }
        private global::System.Int32 _ProductId;
        partial void OnProductIdChanging(global::System.Int32 value);
        partial void OnProductIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String VersionDisplay
        {
            get
            {
                return _VersionDisplay;
            }
            set
            {
                OnVersionDisplayChanging(value);
                ReportPropertyChanging("VersionDisplay");
                _VersionDisplay = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("VersionDisplay");
                OnVersionDisplayChanged();
            }
        }
        private global::System.String _VersionDisplay;
        partial void OnVersionDisplayChanging(global::System.String value);
        partial void OnVersionDisplayChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String VersionMask
        {
            get
            {
                return _VersionMask;
            }
            set
            {
                OnVersionMaskChanging(value);
                ReportPropertyChanging("VersionMask");
                _VersionMask = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("VersionMask");
                OnVersionMaskChanged();
            }
        }
        private global::System.String _VersionMask;
        partial void OnVersionMaskChanging(global::System.String value);
        partial void OnVersionMaskChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_ProductVersions_Products", "Product")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductVersions_Products", "Product").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductVersions_Products", "Product").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ScutexModel.FK_ProductVersions_Products", "Product");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ScutexModel.FK_ProductVersions_Products", "Product", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="Service")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Service : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Service object.
        /// </summary>
        /// <param name="serviceId">Initial value of the ServiceId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="clientUrl">Initial value of the ClientUrl property.</param>
        /// <param name="managementUrl">Initial value of the ManagementUrl property.</param>
        /// <param name="token">Initial value of the Token property.</param>
        /// <param name="inboundPublicKey">Initial value of the InboundPublicKey property.</param>
        /// <param name="inboundPrivateKey">Initial value of the InboundPrivateKey property.</param>
        /// <param name="outboundPublicKey">Initial value of the OutboundPublicKey property.</param>
        /// <param name="outboundPrivateKey">Initial value of the OutboundPrivateKey property.</param>
        /// <param name="managementInboundPublicKey">Initial value of the ManagementInboundPublicKey property.</param>
        /// <param name="managementInboundPrivateKey">Initial value of the ManagementInboundPrivateKey property.</param>
        /// <param name="managementOutboundPublicKey">Initial value of the ManagementOutboundPublicKey property.</param>
        /// <param name="managementOutboundPrivateKey">Initial value of the ManagementOutboundPrivateKey property.</param>
        /// <param name="uniquePad">Initial value of the UniquePad property.</param>
        /// <param name="initialized">Initial value of the Initialized property.</param>
        /// <param name="tested">Initial value of the Tested property.</param>
        /// <param name="lockToIp">Initial value of the LockToIp property.</param>
        /// <param name="clientRequestToken">Initial value of the ClientRequestToken property.</param>
        /// <param name="managementRequestToken">Initial value of the ManagementRequestToken property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        public static Service CreateService(global::System.Int32 serviceId, global::System.String name, global::System.String clientUrl, global::System.String managementUrl, global::System.String token, global::System.String inboundPublicKey, global::System.String inboundPrivateKey, global::System.String outboundPublicKey, global::System.String outboundPrivateKey, global::System.String managementInboundPublicKey, global::System.String managementInboundPrivateKey, global::System.String managementOutboundPublicKey, global::System.String managementOutboundPrivateKey, global::System.Guid uniquePad, global::System.Boolean initialized, global::System.Boolean tested, global::System.Boolean lockToIp, global::System.String clientRequestToken, global::System.String managementRequestToken, global::System.DateTime createdDate)
        {
            Service service = new Service();
            service.ServiceId = serviceId;
            service.Name = name;
            service.ClientUrl = clientUrl;
            service.ManagementUrl = managementUrl;
            service.Token = token;
            service.InboundPublicKey = inboundPublicKey;
            service.InboundPrivateKey = inboundPrivateKey;
            service.OutboundPublicKey = outboundPublicKey;
            service.OutboundPrivateKey = outboundPrivateKey;
            service.ManagementInboundPublicKey = managementInboundPublicKey;
            service.ManagementInboundPrivateKey = managementInboundPrivateKey;
            service.ManagementOutboundPublicKey = managementOutboundPublicKey;
            service.ManagementOutboundPrivateKey = managementOutboundPrivateKey;
            service.UniquePad = uniquePad;
            service.Initialized = initialized;
            service.Tested = tested;
            service.LockToIp = lockToIp;
            service.ClientRequestToken = clientRequestToken;
            service.ManagementRequestToken = managementRequestToken;
            service.CreatedDate = createdDate;
            return service;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ServiceId
        {
            get
            {
                return _ServiceId;
            }
            set
            {
                if (_ServiceId != value)
                {
                    OnServiceIdChanging(value);
                    ReportPropertyChanging("ServiceId");
                    _ServiceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ServiceId");
                    OnServiceIdChanged();
                }
            }
        }
        private global::System.Int32 _ServiceId;
        partial void OnServiceIdChanging(global::System.Int32 value);
        partial void OnServiceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ClientUrl
        {
            get
            {
                return _ClientUrl;
            }
            set
            {
                OnClientUrlChanging(value);
                ReportPropertyChanging("ClientUrl");
                _ClientUrl = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ClientUrl");
                OnClientUrlChanged();
            }
        }
        private global::System.String _ClientUrl;
        partial void OnClientUrlChanging(global::System.String value);
        partial void OnClientUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementUrl
        {
            get
            {
                return _ManagementUrl;
            }
            set
            {
                OnManagementUrlChanging(value);
                ReportPropertyChanging("ManagementUrl");
                _ManagementUrl = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementUrl");
                OnManagementUrlChanged();
            }
        }
        private global::System.String _ManagementUrl;
        partial void OnManagementUrlChanging(global::System.String value);
        partial void OnManagementUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InboundPublicKey
        {
            get
            {
                return _InboundPublicKey;
            }
            set
            {
                OnInboundPublicKeyChanging(value);
                ReportPropertyChanging("InboundPublicKey");
                _InboundPublicKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InboundPublicKey");
                OnInboundPublicKeyChanged();
            }
        }
        private global::System.String _InboundPublicKey;
        partial void OnInboundPublicKeyChanging(global::System.String value);
        partial void OnInboundPublicKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InboundPrivateKey
        {
            get
            {
                return _InboundPrivateKey;
            }
            set
            {
                OnInboundPrivateKeyChanging(value);
                ReportPropertyChanging("InboundPrivateKey");
                _InboundPrivateKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InboundPrivateKey");
                OnInboundPrivateKeyChanged();
            }
        }
        private global::System.String _InboundPrivateKey;
        partial void OnInboundPrivateKeyChanging(global::System.String value);
        partial void OnInboundPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OutboundPublicKey
        {
            get
            {
                return _OutboundPublicKey;
            }
            set
            {
                OnOutboundPublicKeyChanging(value);
                ReportPropertyChanging("OutboundPublicKey");
                _OutboundPublicKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OutboundPublicKey");
                OnOutboundPublicKeyChanged();
            }
        }
        private global::System.String _OutboundPublicKey;
        partial void OnOutboundPublicKeyChanging(global::System.String value);
        partial void OnOutboundPublicKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OutboundPrivateKey
        {
            get
            {
                return _OutboundPrivateKey;
            }
            set
            {
                OnOutboundPrivateKeyChanging(value);
                ReportPropertyChanging("OutboundPrivateKey");
                _OutboundPrivateKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OutboundPrivateKey");
                OnOutboundPrivateKeyChanged();
            }
        }
        private global::System.String _OutboundPrivateKey;
        partial void OnOutboundPrivateKeyChanging(global::System.String value);
        partial void OnOutboundPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementInboundPublicKey
        {
            get
            {
                return _ManagementInboundPublicKey;
            }
            set
            {
                OnManagementInboundPublicKeyChanging(value);
                ReportPropertyChanging("ManagementInboundPublicKey");
                _ManagementInboundPublicKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementInboundPublicKey");
                OnManagementInboundPublicKeyChanged();
            }
        }
        private global::System.String _ManagementInboundPublicKey;
        partial void OnManagementInboundPublicKeyChanging(global::System.String value);
        partial void OnManagementInboundPublicKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementInboundPrivateKey
        {
            get
            {
                return _ManagementInboundPrivateKey;
            }
            set
            {
                OnManagementInboundPrivateKeyChanging(value);
                ReportPropertyChanging("ManagementInboundPrivateKey");
                _ManagementInboundPrivateKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementInboundPrivateKey");
                OnManagementInboundPrivateKeyChanged();
            }
        }
        private global::System.String _ManagementInboundPrivateKey;
        partial void OnManagementInboundPrivateKeyChanging(global::System.String value);
        partial void OnManagementInboundPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementOutboundPublicKey
        {
            get
            {
                return _ManagementOutboundPublicKey;
            }
            set
            {
                OnManagementOutboundPublicKeyChanging(value);
                ReportPropertyChanging("ManagementOutboundPublicKey");
                _ManagementOutboundPublicKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementOutboundPublicKey");
                OnManagementOutboundPublicKeyChanged();
            }
        }
        private global::System.String _ManagementOutboundPublicKey;
        partial void OnManagementOutboundPublicKeyChanging(global::System.String value);
        partial void OnManagementOutboundPublicKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementOutboundPrivateKey
        {
            get
            {
                return _ManagementOutboundPrivateKey;
            }
            set
            {
                OnManagementOutboundPrivateKeyChanging(value);
                ReportPropertyChanging("ManagementOutboundPrivateKey");
                _ManagementOutboundPrivateKey = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementOutboundPrivateKey");
                OnManagementOutboundPrivateKeyChanged();
            }
        }
        private global::System.String _ManagementOutboundPrivateKey;
        partial void OnManagementOutboundPrivateKeyChanging(global::System.String value);
        partial void OnManagementOutboundPrivateKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniquePad
        {
            get
            {
                return _UniquePad;
            }
            set
            {
                OnUniquePadChanging(value);
                ReportPropertyChanging("UniquePad");
                _UniquePad = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniquePad");
                OnUniquePadChanged();
            }
        }
        private global::System.Guid _UniquePad;
        partial void OnUniquePadChanging(global::System.Guid value);
        partial void OnUniquePadChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Initialized
        {
            get
            {
                return _Initialized;
            }
            set
            {
                OnInitializedChanging(value);
                ReportPropertyChanging("Initialized");
                _Initialized = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Initialized");
                OnInitializedChanged();
            }
        }
        private global::System.Boolean _Initialized;
        partial void OnInitializedChanging(global::System.Boolean value);
        partial void OnInitializedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Tested
        {
            get
            {
                return _Tested;
            }
            set
            {
                OnTestedChanging(value);
                ReportPropertyChanging("Tested");
                _Tested = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Tested");
                OnTestedChanged();
            }
        }
        private global::System.Boolean _Tested;
        partial void OnTestedChanging(global::System.Boolean value);
        partial void OnTestedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockToIp
        {
            get
            {
                return _LockToIp;
            }
            set
            {
                OnLockToIpChanging(value);
                ReportPropertyChanging("LockToIp");
                _LockToIp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LockToIp");
                OnLockToIpChanged();
            }
        }
        private global::System.Boolean _LockToIp;
        partial void OnLockToIpChanging(global::System.Boolean value);
        partial void OnLockToIpChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ClientRequestToken
        {
            get
            {
                return _ClientRequestToken;
            }
            set
            {
                OnClientRequestTokenChanging(value);
                ReportPropertyChanging("ClientRequestToken");
                _ClientRequestToken = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ClientRequestToken");
                OnClientRequestTokenChanged();
            }
        }
        private global::System.String _ClientRequestToken;
        partial void OnClientRequestTokenChanging(global::System.String value);
        partial void OnClientRequestTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ManagementRequestToken
        {
            get
            {
                return _ManagementRequestToken;
            }
            set
            {
                OnManagementRequestTokenChanging(value);
                ReportPropertyChanging("ManagementRequestToken");
                _ManagementRequestToken = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ManagementRequestToken");
                OnManagementRequestTokenChanged();
            }
        }
        private global::System.String _ManagementRequestToken;
        partial void OnManagementRequestTokenChanging(global::System.String value);
        partial void OnManagementRequestTokenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_Licenses_Services", "License")]
        public EntityCollection<License> Licenses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<License>("ScutexModel.FK_Licenses_Services", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<License>("ScutexModel.FK_Licenses_Services", "License", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="TrialExpirationOption")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrialExpirationOption : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TrialExpirationOption object.
        /// </summary>
        /// <param name="trialExpirationOptionId">Initial value of the TrialExpirationOptionId property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static TrialExpirationOption CreateTrialExpirationOption(global::System.Int32 trialExpirationOptionId, global::System.String description)
        {
            TrialExpirationOption trialExpirationOption = new TrialExpirationOption();
            trialExpirationOption.TrialExpirationOptionId = trialExpirationOptionId;
            trialExpirationOption.Description = description;
            return trialExpirationOption;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TrialExpirationOptionId
        {
            get
            {
                return _TrialExpirationOptionId;
            }
            set
            {
                if (_TrialExpirationOptionId != value)
                {
                    OnTrialExpirationOptionIdChanging(value);
                    ReportPropertyChanging("TrialExpirationOptionId");
                    _TrialExpirationOptionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TrialExpirationOptionId");
                    OnTrialExpirationOptionIdChanged();
                }
            }
        }
        private global::System.Int32 _TrialExpirationOptionId;
        partial void OnTrialExpirationOptionIdChanging(global::System.Int32 value);
        partial void OnTrialExpirationOptionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_TrialSettings_TrialExpirationOptions", "TrialSetting")]
        public EntityCollection<TrialSetting> TrialSettings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TrialSetting>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialSetting");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TrialSetting>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialSetting", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ScutexModel", Name="TrialSetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrialSetting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TrialSetting object.
        /// </summary>
        /// <param name="trialSettingId">Initial value of the TrialSettingId property.</param>
        /// <param name="licenseId">Initial value of the LicenseId property.</param>
        /// <param name="trialExpirationOptionId">Initial value of the TrialExpirationOptionId property.</param>
        /// <param name="expirationData">Initial value of the ExpirationData property.</param>
        public static TrialSetting CreateTrialSetting(global::System.Int32 trialSettingId, global::System.Int32 licenseId, global::System.Int32 trialExpirationOptionId, global::System.String expirationData)
        {
            TrialSetting trialSetting = new TrialSetting();
            trialSetting.TrialSettingId = trialSettingId;
            trialSetting.LicenseId = licenseId;
            trialSetting.TrialExpirationOptionId = trialExpirationOptionId;
            trialSetting.ExpirationData = expirationData;
            return trialSetting;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TrialSettingId
        {
            get
            {
                return _TrialSettingId;
            }
            set
            {
                if (_TrialSettingId != value)
                {
                    OnTrialSettingIdChanging(value);
                    ReportPropertyChanging("TrialSettingId");
                    _TrialSettingId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TrialSettingId");
                    OnTrialSettingIdChanged();
                }
            }
        }
        private global::System.Int32 _TrialSettingId;
        partial void OnTrialSettingIdChanging(global::System.Int32 value);
        partial void OnTrialSettingIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LicenseId
        {
            get
            {
                return _LicenseId;
            }
            set
            {
                OnLicenseIdChanging(value);
                ReportPropertyChanging("LicenseId");
                _LicenseId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LicenseId");
                OnLicenseIdChanged();
            }
        }
        private global::System.Int32 _LicenseId;
        partial void OnLicenseIdChanging(global::System.Int32 value);
        partial void OnLicenseIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TrialExpirationOptionId
        {
            get
            {
                return _TrialExpirationOptionId;
            }
            set
            {
                OnTrialExpirationOptionIdChanging(value);
                ReportPropertyChanging("TrialExpirationOptionId");
                _TrialExpirationOptionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TrialExpirationOptionId");
                OnTrialExpirationOptionIdChanged();
            }
        }
        private global::System.Int32 _TrialExpirationOptionId;
        partial void OnTrialExpirationOptionIdChanging(global::System.Int32 value);
        partial void OnTrialExpirationOptionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ExpirationData
        {
            get
            {
                return _ExpirationData;
            }
            set
            {
                OnExpirationDataChanging(value);
                ReportPropertyChanging("ExpirationData");
                _ExpirationData = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ExpirationData");
                OnExpirationDataChanged();
            }
        }
        private global::System.String _ExpirationData;
        partial void OnExpirationDataChanging(global::System.String value);
        partial void OnExpirationDataChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_TrialSettings_Licenses", "License")]
        public License License
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_TrialSettings_Licenses", "License").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_TrialSettings_Licenses", "License").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<License> LicenseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<License>("ScutexModel.FK_TrialSettings_Licenses", "License");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<License>("ScutexModel.FK_TrialSettings_Licenses", "License", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ScutexModel", "FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption")]
        public TrialExpirationOption TrialExpirationOption
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TrialExpirationOption>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TrialExpirationOption>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TrialExpirationOption> TrialExpirationOptionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TrialExpirationOption>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TrialExpirationOption>("ScutexModel.FK_TrialSettings_TrialExpirationOptions", "TrialExpirationOption", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
